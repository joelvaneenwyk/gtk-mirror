# yaml-language-server: $schema=https://taskfile.dev/schema.json
# https://taskfile.dev

version: "3"

vars:
  VCPKG_BOOTSTRAP_BAT: "{{.TASKFILE_DIR}}/external/vcpkg/bootstrap-vcpkg.bat"
  VCPKG_BOOTSTRAP_SH: "{{.TASKFILE_DIR}}/external/vcpkg/bootstrap-vcpkg.sh"
  VCPKG_EXE: "{{.TASKFILE_DIR}}/external/vcpkg/vcpkg.exe"

  RUN_WINDOWS: 'cmd /d /c'
  RUN_UNIX: 'sh -c'
  RUN: '{{if eq OS "windows"}}{{.RUN_WINDOWS}}{{ else }}{{.RUN_UNIX}}{{ end }}'

  MSBUILD_EXE_RAW:
    sh: |
      strings=("Preview" "Enterprise" "Professional" "Community")
      for str in "${strings[@]}"
      do
        result="C:/Program Files/Microsoft Visual Studio/2022/${str}/MSBuild/Current/Bin/amd64/MSBuild.exe"
        if [ -e "$result" ]; then
          echo "$result"
          break
        fi
      done
  MSBUILD_EXE: '{{fromSlash .MSBUILD_EXE_RAW}}'

  BUILD_INT_BASE_DIR: "{{.TASKFILE_DIR}}/.build"
  BUILD_INT_DIR: "{{.BUILD_INT_BASE_DIR}}/vscode"
  BUILD_DIR: "{{fromSlash .BUILD_INT_DIR}}"

  BUILD_TOOLCHAIN:
  BUILD_ARCH: x86_64
  BUILD_CC: clang
  PACKAGE_PARTS:
    - "mingw-w64"
    - "{{.BUILD_TOOLCHAIN}}"
    - "{{.BUILD_ARCH}}"
  PACKAGE_NAME_PREFIX: '{{ without .PACKAGE_PARTS "" | join "-" }}'
  MSYS2_PACKAGES:
    - "git"
    - "ncurses"
    - "{{.PACKAGE_NAME_PREFIX}}-{{.BUILD_CC}}"
    - "{{.PACKAGE_NAME_PREFIX}}-clang"
    - "{{.PACKAGE_NAME_PREFIX}}-gcc"
    - "{{.PACKAGE_NAME_PREFIX}}-glib2"
    # - "{{.PACKAGE_NAME_PREFIX}}-meson"
    - "{{.PACKAGE_NAME_PREFIX}}-ncurses"
    - "{{.PACKAGE_NAME_PREFIX}}-ntldd"
    - "{{.PACKAGE_NAME_PREFIX}}-openssl"
    - "{{.PACKAGE_NAME_PREFIX}}-pkgconf"
    - "{{.PACKAGE_NAME_PREFIX}}-zlib"
    # Defaults
    - "{{.PACKAGE_NAME_PREFIX}}-gstreamer"
    - "{{.PACKAGE_NAME_PREFIX}}-pango"
    - "{{.PACKAGE_NAME_PREFIX}}-gcc"
    - "{{.PACKAGE_NAME_PREFIX}}-binutils"
    - "{{.PACKAGE_NAME_PREFIX}}-cairo"
    - "{{.PACKAGE_NAME_PREFIX}}-gdk-pixbuf2"
    - "{{.PACKAGE_NAME_PREFIX}}-glib2"
    - "{{.PACKAGE_NAME_PREFIX}}-libepoxy"
    - "{{.PACKAGE_NAME_PREFIX}}-pango"
    - "{{.PACKAGE_NAME_PREFIX}}-cairo"
  MSYS2_PYTHON_PACKAGES:
    - "{{.PACKAGE_NAME_PREFIX}}-python"
    - "{{.PACKAGE_NAME_PREFIX}}-python-pip"
    - "{{.PACKAGE_NAME_PREFIX}}-python-pkgconfig"

env:
  VCPKG_DISABLE_METRICS: 1

tasks:
  default:
    cmds:
      - task: setup
      # - task: meson-build

  meson-clean:
    cmds:
      - task: delete
        vars: { TARGET_DIR: '{{.BUILD_DIR}}' }

  meson-configure:
    deps: [install-dependencies]
    preconditions:
      - meson --version
    sources:
      - meson.build
    generates:
      - '{{.BUILD_DIR}}/meson-info/meson-info.json'
    cmds:
      - cmd: >-
          meson setup
          --reconfigure
          --backend=vs2022
          --wrap-mode=forcefallback
          --native-file "{{.TASKFILE_DIR}}/scripts/meson-vcpkg.ini"
          -Duse_zlib_ng=false
          -Dbuildtype=release
          "{{.BUILD_DIR}}" "{{.TASKFILE_DIR}}"

  meson-build:
    deps: [meson-configure]
    preconditions:
      - '"{{.MSBUILD_EXE}}" --version'
    vars:
      SOLUTION_PATH: '{{.BUILD_DIR}}/gtk.sln'
    cmds:
      - cmd: '"{{.MSBUILD_EXE}}" /t:Build "{{fromSlash .SOLUTION_PATH}}"'

  install-dependencies:
    deps: [install-packages-scoop-pkg-config]
    cmds:
      - task: install-packages
      - task: vcpkg-integrate

  scoop-install:
    desc: Install libraries with scoop
    status:
      - 'scoop --version'
    cmds:
      - cmd: pwsh -NoProfile -Command 'iex "& {$(irm get.scoop.sh)} -RunAsAdmin"'
        platforms: [windows]
        ignore_error: true
      - cmd: pwsh -NoProfile -Command 'Join-Path (Resolve-Path ~).Path "scoop/shims" >> $Env:GITHUB_PATH'
        platforms: [windows]
        ignore_error: true

  git-submodule-init:
    status:
      - 'test -f "{{.VCPKG_BOOTSTRAP_BAT}}"'
    cmds:
      - cmd: 'git -C "{{.TASKFILE_DIR}}" submodule update --init --recursive'

  vcpkg-integrate:
    deps: [vcpkg-download]
    internal: true
    cmds:
      - cmd: '{{.RUN}} "{{ fromSlash .VCPKG_EXE }}" integrate install'

  vcpkg-download:
    deps: [git-submodule-init]
    status:
      - 'test -f "{{.VCPKG_EXE}}"'
    cmds:
      - cmd: '{{.RUN}} "{{ fromSlash .VCPKG_BOOTSTRAP_BAT }}" -disableMetrics'

  vcpkg:
    deps: [vcpkg-download]
    cmds:
      - cmd: '{{.RUN}} "{{ fromSlash .VCPKG_EXE }}" {{.CLI_ARGS}}'

  meson:
    cmds:
      - cmd: '{{.RUN}} meson {{.CLI_ARGS}}'

  update-packages:
    ignore_error: true
    cmds:
      - task: update-packages-pacman

  update-packages-pacman:
    deps: [pacman-unlock]
    cmds:
      - task: pacman-unlock
      - cmd: 'pacman -Syu --noconfirm'
        ignore_error: true

  install-packages:
    cmds:
      - task: install-packages-scoop-pkg-config
      - task: install-packages-pacman

  install-packages-scoop-pkg-config:
    deps: [scoop-install]
    platforms: [windows]
    status:
      - pkg-config --version
    cmds:
      - cmd: scoop install extras/pkg-config-lite

  install-packages-pacman:
    vars:
      PACKAGES: '{{.MSYS2_PACKAGES | join " "}}'
    cmds:
      - task: pacman-unlock
      - cmd: 'pacman -Syu --noconfirm'
        ignore_error: true
      - cmd: 'pacman -S --needed --noconfirm {{ .PACKAGES }}'
        ignore_error: true
      - task: pacman-unlock

  install-each-package:
    deps: [update-packages]
    vars:
      PACKAGES: '{{.MSYS2_PACKAGES | join " "}}'
    cmds:
      - for:
          var: MSYS2_PACKAGES
        task: install-package-pacman
        vars:
          PACKAGE: '{{.ITEM}}'

  pacman-unlock:
    status:
      - 'test ! -f /var/lib/pacman/db.lck'
    cmds:
      - cmd: 'rm -f /var/lib/pacman/db.lck'
        ignore_error: true

  install-package-pacman:
    deps: [pacman-unlock]
    requires:
      vars: [PACKAGE]
    desc: 'Install package {{.PACKAGE}}'
    preconditions:
      - 'pacman --version'
    status:
      - 'pacman -Qk {{.PACKAGE}}'
    cmds:
      - cmd: 'pacman -S --needed --noconfirm "{{.PACKAGE}}"'

  delete:
    internal: true
    requires: { vars: [TARGET_DIR] }
    status:
      - 'test ! -d "{{.TARGET_DIR}}"'
    cmds:
      - cmd: '{{.RUN}} if exist "{{.TARGET_DIR}}" rmdir /s /q "{{.TARGET_DIR}}"'
        platforms: [windows]
      - cmd: '{{.RUN}} rm -rf "{{.TARGET_DIR}}"'
        platforms: [linux, darwin]

  ninja:
    deps: [meson]
    preconditions:
      - ninja --version
    cmds:
      - cmd: 'ninja -C "{{.BUILD_DIR}}"'

  build-msbuild:
    cmds:
      - task: build-msbuild-gtk
        vars: { CONFIG: Debug, PLATFORM: x64 }
      - task: build-msbuild-gtk
        vars: { CONFIG: Release, PLATFORM: x64 }

  build-msbuild-gtk:
    internal: true
    deps: [install-dependencies]
    vars:
      CONFIG: '{{.CONFIG | default "Debug"}}'
      PLATFORM: '{{.PLATFORM | default "x64"}}'
    cmds:
      - cmd: '"{{ .MSBUILD_EXE }}" "{{.TASKFILE_DIR}}/vs/gtk.sln" /t:Build /p:Configuration="{{.CONFIG}}" /p:Platform="{{.PLATFORM}}"'

  sync:
    sources:
      - pyproject.toml
    generates:
      - .venv/**/*
    cmds:
      - cmd: rye sync --no-lock

  setup:
    deps: [sync]
    vars:
      MESON_OPTIONS: >-
        -Dgobject-introspection:werror=false
        -Dgraphene:introspection=disabled
        -Dintrospection=disabled
        -Dmedia-gstreamer=disabled
        -Dvulkan=disabled
        --buildtype release
        --wrap-mode nofallback
        -D b_lto=true
        -D strip=true
        --default-library shared
      CROSS_FILE_DEFAULT: /usr/share/mingw/toolchain-mingw64.meson
      CROSS_FILE_WINE: /usr/share/mingw/toolchain-mingw64-wine.meson
      MESON_EXE_WRAPPER_WINE: /usr/bin/x86_64-w64-mingw64-wine
    cmds:
      - cmd: |
          . .gitlab-ci/show-info-linux.sh
        ignore_error: true
      - cmd: | # shell
          if pacman --version; then
            pacman -Syu --noconfirm
            pacman -S --needed --noconfirm \
              "filesystem" \
              "${MINGW_PACKAGE_PREFIX}-gstreamer" \
              "${MINGW_PACKAGE_PREFIX}-pango" \
              "${MINGW_PACKAGE_PREFIX}-gcc" \
              "${MINGW_PACKAGE_PREFIX}-binutils" \
              "${MINGW_PACKAGE_PREFIX}-cairo" \
              "${MINGW_PACKAGE_PREFIX}-gdk-pixbuf2" \
              "${MINGW_PACKAGE_PREFIX}-glib2" \
              "${MINGW_PACKAGE_PREFIX}-libepoxy" \
              "${MINGW_PACKAGE_PREFIX}-pango" \
              "${MINGW_PACKAGE_PREFIX}-cairo"
          else
            echo "Pacman not found."
            exit 0
          fi
      - cmd: | # shell
          if [ ! -e ./.venv/Scripts/activate ]; then
            rye sync
          fi
      - cmd: | # shell
          set -eax

          if [ -z "$CROSS_FILE" ]; then
            if [ -z "$NEED_WINE" ]; then
              export CROSS_FILE="{{.CROSS_FILE_DEFAULT}}"
            else
              export CROSS_FILE="{{.CROSS_FILE_WINE}}"
              export MESON_EXE_WRAPPER="{{.MESON_EXE_WRAPPER_WINE}}"
            fi
          fi

          rye run meson subprojects download
          rye run meson subprojects update --reset

          if rye run meson setup {{.MESON_OPTIONS}} _build; then
            echo "Meson configuration succeeded."
          else
            echo "Meson configuration failed, attempting to reconfigure."
            if rye run meson setup --reconfigure {{.MESON_OPTIONS}} _build; then
              echo "Meson reconfiguration succeeded."
            else
              echo "Meson reconfiguration failed."
              exit 5
            fi
          fi
          rye run meson compile -C _build
